#+title: MyEmacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el


This file is the source of truth to configure Emacs to my liking. It uses Literate prograamming and Reproducibility principles
to generate $PROJ/.init.el file.

* My Emacs 
** Basic Setup
*** Intro
    We want to launch the emacs full screen to get to work. 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)  ;; hide default emacs startup msg
  (scroll-bar-mode -1)              ;; disable visual scrollbar
  (tool-bar-mode -1)                ;; disable toolbar
  (tooltip-mode -1)                 ;; tooltip is a overlay info, disable it 
  (set-fringe-mode 10)              ;; The fringe is a thin strip on the left and/or right edge of a window. 
  (menu-bar-mode -1)                ;; disable menu bar mode
  (toggle-frame-fullscreen)         ;; start with fullscreen

  ;; Y/N is better
  (defalias 'yes-or-no-p 'y-or-n-p)
#+End_src
*** Initial Scrach buffer mode and message
#+begin_src emacs-lisp
  (setq initial-scratch-message "Welcome Back \n")
#+end_src

*** Font & Icons
Ensure these are downloaded. If not, the script wont continue.

**** TODO Find a way to download with elisp
    if the fonts if not already done on the system as elisp code.
#+begin_src emacs-lisp
  ;; download Fira code fonts which looks good. 
  (set-face-attribute 'default nil :font "Fira Code" :height 150)



  ;; Customizing ModeLine with all-the-icons
  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src

*** Keyboard: Esc to remove prompt
#+begin_src emacs-lisp
;; Make ESC key work like CRTL + G, or hide log/warning prompts 
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Package management
#+begin_src emacs-lisp
  ;; =========== Packagae loading and sources ===================
  (require 'package)

  ;; Deprioritize Melpa over all stable archives if same package is found on stable versions. 
  (setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   )


	package-archive-priorities '(
				     ("melpa-stable". 10)
				     ("org". 9)
				     ("elpa". 8)
				     ("melpa". 1)
				     )
	)


  (package-initialize)

  (unless package-archive-contents (package-refresh-contents))

  

  ;; initialize use-package on non-linux distros
  (unless (package-installed-p 'use-package) (package-install 'use-package) )

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

*** Line and Column Numbers
#+begin_src emacs-lisp
  ;; line and column numbers show
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; disable line numebrs for specific modes
  (dolist (mode '(
		  ; list of modes 
		  org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
	   (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Theme
#+begin_src emacs-lisp
  ;; Dark theme. Non-dark variant is found with spacemacs-light
  ;; alternative good option is tango-dark.
  ;; unsing t at the end supresses interactive prompt.
  (use-package spacemacs-theme
    :defer t
    :init (load-theme 'spacemacs-light t))

#+end_src

*** ModeLine Customization
This requires All the icons pacakge to be loaded for better UI. 
#+begin_src emacs-lisp
  ;; if all-icons-font is not installed prompt the user to install
  ;; manula installation via `M-x all-the-icons-install-fonts`
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom (doom-modeline-height 15))

#+end_src

** Basic Getting Around
*** Use Tab to get help on completion
    - Neat trick https://stackoverflow.com/questions/7022898/emacs-autocompletion-in-emacs-lisp-mode 
#+begin_src emacs-lisp
  ;;; uses tab to show completions
  (setq tab-always-indent 'complete)
  (add-to-list 'completion-styles 'initials t)
#+end_src
*** Recent files
#+begin_src emacs-lisp
  (setq recentf-mode t)
#+end_src
*** Search Completion
**** via Selectrum
  #+begin_src emacs-lisp
  ;; fuzzy search on M-x for use with Selectrum
  ;; for example: `M-x swi buf` to get to Switch Buffer
  (use-package selectrum-prescient)

  ;; Simple and fast M-x completion mode
   (use-package selectrum
    :functions 'selectrum-mode
    :init
    (selectrum-mode 1)
    (selectrum-prescient-mode +1)
    (prescient-persist-mode +1))
  #+end_src
**** via Vertico
- Seems like Vertico is successor of Selectrum [[https://github.com/minad/vertico][Vertico]]
- Tab-Completion is a problem with Vertico.
  #+begin_src emacs-lisp
   ;; (use-package vertico
    ;;   :init
    ;;   (vertico-mode)
    ;;   )

    ;; ;; Optionally use the orderless completion style.
    ;; (use-package orderless
    ;;   :init
    ;;   ;; Configure a custom style dispatcher (see the Consult wiki)
    ;;   ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;   ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    ;;   (setq completion-styles '(initials orderless )
    ;; 	completion-category-defaults nil
    ;; 	completion-category-overrides '((file (styles partial-completion)))))
  #+end_src
**** Save History
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
**** Consult for supercharing 
#+begin_src emacs-lisp
  ;; ;; Provides additonal consulting mode for M-x
  ;; use `consult-` keys on M-x
  (use-package consult
    :bind (
	   ;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x b" . consult-buffer)
	   ("M-s d" . consult-find)
	   ("M-s l" . consult-line)
	   ;; C-s is mapped to consult line 
	   ("C-s" . consult-line)
	   ))
#+end_src
**** Rich Annotation on M-x (Marginalia)
#+begin_src emacs-lisp
   ;; Enable richer annotations using the Marginalia package
    ;; For example; shows description on right hand side.
    (use-package marginalia
      ;; The :init configuration is always executed (Not lazy!)
      :init

      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode))
#+end_src
*** Discovering actions based on context: Embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Show Keys next to M-x Command
#+begin_src emacs-lisp
  ;; Displays all associated key binding and their functions after set delay on the mini-mode
  (use-package which-key
    :init(which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 2))

#+end_src
** Org Mode
*** Basic Setup for Bullets, Ellipsis
#+begin_src emacs-lisp

  ;; ORG-mode specifics
  (use-package org
    :config
    (setq org-ellipsis " ▼")
    )

  ;; use org-tempo to allow faster code block addition
  (require 'org-tempo)

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-ellipsis " ▼")
    (setq org-superstar-headline-bullets-list
	  '("◉" "◑" "◐" "◷" "▷")))
#+end_src
*** Customizing Left Margins
This didn't work for many solution pretaining to windows.
The solution that works is taken from [[https://stackoverflow.com/questions/39083118/emacs-how-to-set-margins-to-automatically-adjust-when-in-split-screen][SO answer]]
#+begin_src emacs-lisp
(defun my-set-margins ()
  "Set margins in current buffer."
  (setq left-margin-width 10)
  (setq right-margin-width 0))

;; Add margins by default to a mode
(add-hook 'org-mode-hook 'my-set-margins)
#+end_src
*** Note Taking: Org-Roam
   - Fantastic way to backlinking and writing graphed ideas
#+begin_src emacs-lisp
  ;; This is required for org-roam to not error on database connection. 
  (use-package emacsql-sqlite3)
  (setq org-roam-database-connector 'sqlite3)

  ;; install org-roam
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/roamnotes/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-setup)
    )

#+end_src
*** Org Zen Mode; similar to iAWriter
#+begin_src emacs-lisp
  ;; Zen Mode Writing
  (use-package writeroom-mode)
#+end_src
** Magit
Interacting with Git is awesome in Emacs.
*** Basic Setup
#+begin_src emacs-lisp
  ;; magit setup
  (use-package magit)
#+end_src
* Populate init.el on Save
** Instruct Org-Babel for programming language
#+begin_src emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t))
    )
#+end_src
** on-Save hook on orgmode this file
#+begin_src emacs-lisp
(defun org-babel-tangle-emacsconfig-on-save ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/EmacsConfig.org"))
      (let ((org-config-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook
	    (lambda ()
	      (add-hook 'after-save-hook #'org-babel-tangle-emacsconfig-on-save)))
#+end_src


* New Things to Add
** Code Autocompletion 
** Company-mode
** Find Recent Files faster 
** Emacs-lisp linter 
** Straight Package Manager
- using this confuses with normal package management.
- Disabled for now.
- When turned on to use Org-Roam-UI, it downloaded all new variants of org, org-roam and confused the existing config.
#+begin_src emacs-lisp
  ;; (defvar bootstrap-version)
  ;; (let ((bootstrap-file
  ;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  ;;       (bootstrap-version 6))
  ;;   (unless (file-exists-p bootstrap-file)
  ;;     (with-current-buffer
  ;; 	(url-retrieve-synchronously
  ;; 	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  ;; 	 'silent 'inhibit-cookies)
  ;;       (goto-char (point-max))
  ;;       (eval-print-last-sexp)))
  ;;   (load bootstrap-file nil 'nomessage))

  ;; (setq package-enable-at-startup nil)
#+end_src

** Org Roam UI
It's cool to visualize Graph.
- It downloads a lot of org, org-roam, web-socket and builds them.
- Does it duplicates the pacakges?
- This conflicted with Org-roam-capture with error
  "org-fold-show-all" not defined.
- TODO Why can it not be found on Melpa?
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src

** Org Roam Export as HTML
#+begin_src emacs-lisp
  ;; required for org-roam-export to be available
  (require 'org-roam-export)
#+end_src

** Org Mode Start
- Start with 2 levels shown but all hidden. Easier to read. 
#+begin_src emacs-lisp
  (setq org-startup-folded 'show2levels)
#+end_src
