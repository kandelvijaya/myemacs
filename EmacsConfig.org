#+title: MyEmacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el


This file is the source of truth to configure Emacs to my liking. It uses Literate prograamming and Reproducibility principles
to generate $PROJ/.init.el file.


* My Emacs
This emacs was setupw on MacOS M1 machine with Brew using the
following command.
1. It also supports Xwidget to browse web within emacs.
#+begin_src sh
  brew tap d12frosted/emacs-plus
  
  brew install emacs-plus@28 --with-xwidgets --with-imagemagick --with-nobu417-big-sur-icon
#+end_src

This also needs Fira Code Nerd Font which can be obtained from [[https://www.nerdfonts.com/font-downloads][here]]. 
** Basic Setup
*** Intro
    We want to launch the emacs full screen to get to work. 
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)  ;; hide default emacs startup msg
  (scroll-bar-mode -1)              ;; disable visual scrollbar
  (tool-bar-mode -1)                ;; disable toolbar
  (tooltip-mode -1)                 ;; tooltip is a overlay info, disable it 
  (set-fringe-mode 10)              ;; The fringe is a thin strip on the left and/or right edge of a window. 
  (menu-bar-mode -1)                ;; disable menu bar mode
  (toggle-frame-fullscreen)         ;; start with fullscreen

  ;; Y/N is better
  (defalias 'yes-or-no-p 'y-or-n-p)

#+end_src
*** Initial Scrach buffer mode and message
#+begin_src emacs-lisp
  (setq initial-scratch-message "; Welcome Back \n")
#+end_src

*** Keyboard: Esc to remove prompt
#+begin_src emacs-lisp
;; Make ESC key work like CRTL + G, or hide log/warning prompts 
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Package management Setup
#+begin_src emacs-lisp
  ;; =========== Packagae loading and sources ===================
  (require 'package)

  ;; Deprioritize Melpa over all stable archives if same package is found on stable versions. 
  (setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   )


	package-archive-priorities '(
				     ("melpa-stable". 10)
				     ("org". 9)
				     ("elpa". 8)
				     ("melpa". 1)
				     )
	)


  (package-initialize)

  (unless package-archive-contents (package-refresh-contents))

  
  ;; initialize use-package on non-linux distros
  (unless (package-installed-p 'use-package) (package-install 'use-package) )

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

*** Font & Icons
Ensure these are downloaded. If not, the script wont continue.

**** TODO Find a way to download with elisp
    if the fonts if not already done on the system as elisp code.
#+begin_src emacs-lisp
  ;; download Fira code fonts which looks good. 
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 140)

  ;; Customizing ModeLine with all-the-icons
  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src
*** Line and Column Numbers
#+begin_src emacs-lisp
  ;; line and column numbers show
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; disable line numebrs for specific modes
  (dolist (mode '(
		  ; list of modes 
		  org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
	   (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
*** ModeLine Customization
This requires All the icons pacakge to be loaded for better UI. 
#+begin_src emacs-lisp
  ;; if all-icons-font is not installed prompt the user to install
  ;; manula installation via `M-x all-the-icons-install-fonts`
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :custom (doom-modeline-height 15))

#+end_src
*** Debug on Error
#+begin_src emacs-lisp
(setq debug-on-error t)
#+end_src

** Tangle Source Code to init.el on Save of this file
#+begin_src emacs-lisp
  (defun org-babel-tangle-emacsconfig-on-save ()
      (when (string-equal (buffer-file-name)
			  (expand-file-name "~/.emacs.d/EmacsConfig.org"))
	(let ((org-config-babel-evaluate nil))
	  (org-babel-tangle))))

    (add-hook 'org-mode-hook
	      (lambda ()
		(add-hook 'after-save-hook #'org-babel-tangle-emacsconfig-on-save)))
  
#+end_src

** Basic Getting Around
*** Use Tab to get help on completion
- Neat trick https://stackoverflow.com/questions/7022898/emacs-autocompletion-in-emacs-lisp-mode
#+begin_src emacs-lisp
;;; uses tab to show completions
(setq tab-always-indent 'complete)
(add-to-list 'completion-styles 'initials t)
#+end_src
*** [Disabled] Recent files
- this caused error on recentf-expand-file-name non-void function. 
#+begin_src emacs-lisp
;;  (setq recentf-mode t)
;;  (setq recentf-save-file (recentf-expand-file-name "~/.emacs.d/.recentf"))
#+end_src
*** Search Completion
**** via Selectrum
#+begin_src emacs-lisp
  ;; fuzzy search on M-x for use with Selectrum
  ;; for example: `M-x swi buf` to get to Switch Buffer
  ;; (use-package selectrum-prescient)

  ;; Simple and fast M-x completion mode
   (use-package selectrum
    :functions 'selectrum-mode
    :init
    (selectrum-mode 1)
    (selectrum-prescient-mode +1)
    (prescient-persist-mode +1))
#+end_src
**** [Didn't work well] via Vertico
- Seems like Vertico is successor of Selectrum [[https://github.com/minad/vertico][Vertico]]
- Tab-Completion is a problem with Vertico
**** [Works with Selectrum] via Corfu
- Corfu is in-region completion rather than in mini-buffer.
- Somehow I found Selectrum mini-buffer completion much more nicer.
  #+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      ;; :custom
      ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      ;; (corfu-auto t)                 ;; Enable auto completion
      ;; (corfu-separator ?\s)          ;; Orderless field separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin

      ;; Enable Corfu only for certain modes.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      ;; Recommended: Enable Corfu globally.
      ;; This is recommended since Dabbrev can be used globally (M-/).
      ;; See also `corfu-excluded-modes'.
      :init
      (global-corfu-mode))

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; TAB cycle if there are only few candidates
      (setq completion-cycle-threshold 3)

      ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
      ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
      (setq read-extended-command-predicate
            #'command-completion-default-include-p)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (setq tab-always-indent 'complete))

          #+end_src

  - Corfu specific settings
    #+begin_src emacs-lisp
      ;; enable doc lookup popup on the side
      (use-package corfu-doc)
      (add-hook 'corfu-mode-hook #'corfu-doc-mode)


      ;; move corfu popup to mini-buffer for more actions that can be performed. 
      (defun corfu-move-to-minibuffer ()
        (interactive)
        (let ((completion-extra-properties corfu--extra)
              completion-cycle-threshold completion-cycling)
          (apply #'consult-completion-in-region completion-in-region--data)))
      (define-key corfu-map "\M-m" #'corfu-move-to-minibuffer)
    #+end_src
  - Corfu popup doesnot work in Org Mode Source Code block.
**** Save History
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
**** Consult for supercharing 
#+begin_src emacs-lisp
  ;; ;; Provides additonal consulting mode for M-x
  ;; use `consult-` keys on M-x
  (use-package consult
    :bind (
	   ;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x b" . consult-buffer)
	   ("M-s d" . consult-find)
	   ("M-s l" . consult-line)
	   ;; C-s is mapped to consult line 
	   ("C-s" . consult-line)
	   ))
#+end_src
**** Rich Annotation on M-x (Marginalia)
#+begin_src emacs-lisp
   ;; Enable richer annotations using the Marginalia package
    ;; For example; shows description on right hand side.
    (use-package marginalia
      ;; The :init configuration is always executed (Not lazy!)
      :init

      ;; Must be in the :init section of use-package such that the mode gets
      ;; enabled right away. Note that this forces loading the package.
      (marginalia-mode))
#+end_src
*** Discovering actions based on context: Embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
*** Show Keys next to M-x Command
#+begin_src emacs-lisp
  ;; Displays all associated key binding and their functions after set delay on the mini-mode
  (use-package which-key
    :init(which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 2))

#+end_src
*** Getting help for function, variable
**** Open in Helpful in another buffer but keep cursor on current.
- This allows to press ESC key to quit help, documentation or mini spawned buffer.
- This blog post is awesome [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][mastering key bindings]]
#+begin_src emacs-lisp
    (defun bj-helpful-callable-in-another-window ()
      "Helpful-callable create a new window and when pressing ESC it actually kills the initiating window.

       This function switches the window once helpful-callabel is done so at to make ESC work as expected
      "
      (interactive)
      (progn 
	(call-interactively #'helpful-callable)
	(call-interactively #'other-window)
      )
    )
#+end_src
***** TODO Maybe swap the implementation of helpful-callable
#+begin_src emacs-lisp

#+end_src
**** Using Helpful package 
- By default emacs will show C-c h f/v/k will display help for variable function and keys.
- However the default view is monotonous black and white. No difference between source, further pages.
- [[https://github.com/Wilfred/helpful][Helpful]] package aims to solve this.
#+begin_src emacs-lisp
    (use-package helpful)

    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'bj-helpful-callable-in-another-window)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
#+end_src
*** Auto Text Fill
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

** Org Mode
*** Basic Setup for Bullets, Ellipsis
#+begin_src emacs-lisp

  ;; ORG-mode specifics
  (use-package org
    :config
    (setq org-ellipsis " ▼")
    )

  ;; use org-tempo to allow faster code block addition
  (require 'org-tempo)

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-ellipsis " ▼")
    (setq org-superstar-headline-bullets-list
	  '("◉" "◑" "◐" "◷" "▷")))
#+end_src
*** Customizing Left Margins
This didn't work for many solution pretaining to windows.
The solution that works is taken from [[https://stackoverflow.com/questions/39083118/emacs-how-to-set-margins-to-automatically-adjust-when-in-split-screen][SO answer]]
#+begin_src emacs-lisp
(defun my-set-margins ()
  "Set margins in current buffer."
  (setq left-margin-width 10)
  (setq right-margin-width 0))

;; Add margins by default to a mode
(add-hook 'org-mode-hook 'my-set-margins)
#+end_src
*** Note Taking: Org-Roam
   - Fantastic way to backlinking and writing graphed ideas
#+begin_src emacs-lisp
  ;; This is required for org-roam to not error on database connection. 
  (use-package emacsql-sqlite3)
  (setq org-roam-database-connector 'sqlite3)

  ;; install org-roam
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Library/Mobile Documents/com~apple~CloudDocs/All Notes/roamnotes/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-setup)
    )

#+end_src
*** Org Zen Mode; similar to iAWriter
#+begin_src emacs-lisp
  ;; Zen Mode Writing
  (use-package writeroom-mode)
#+end_src
** Magit
Interacting with Git is awesome in Emacs.
*** Basic Setup
#+begin_src emacs-lisp
  ;; magit setup
  (use-package magit)
#+end_src
** Project Management
#+begin_src emacs-lisp
  (use-package projectile
   :diminish projectile-mode
  :ensure t
  :pin melpa-stable
  :init
  (progn
   (projectile-mode +1)
   (when (file-directory-p "~/Projects/")
    (setq projectile-project-search-path '("~/Projects/")))
   (when (file-directory-p "~/Work/")
     (push "~/Work/" projectile-project-search-path)
     )
  )
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src
*** Consult integration
#+begin_src emacs-lisp
(use-package consult-projectile)
#+end_src
** Standard Libraries
*** File management
- check https://github.com/rejeep/f.el 
#+begin_src emacs-lisp
  (use-package f)
#+end_src
*** String manipulation
#+begin_src emacs-lisp
(use-package s)
#+end_src

* Embedded Browser Support
** Installation of Emacs with xWidget Support
- Install emacs via homebrew
- `brew install emacs-plus@29 --with-xwidgets --with-imagemagick --with-nobu417-big-sur-icon`
- For more info check [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted emacs plus repo]]
** Setting default option to use xwidget-webkit
#+begin_src emacs-lisp
  (use-package xwwp)
  #+end_src
* Programming IDE Like support
** Syncing MacOS $PAHT inside Emacs
- There is a package to address this issue [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
  #+begin_src emacs-lisp
      (use-package exec-path-from-shell)
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-initialize))
  #+end_src
** Code Autocompletion 
** LSP Mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration)
           ;;(swift-mode . lsp-deferred)
           )
    :commands (lsp lsp-deffered))
#+end_src
*** Python lang support
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
			    (require 'lsp-pyright)
			    (lsp-deferred))))  ; or lsp-deferred
  (use-package lsp-ui)
#+end_src
*** Run python language server ifneeded
- Python lsp server needs to be running for LSP to work
- Start the lsp server for the lifetime of emacs if this was not started
#+begin_src emacs-lisp

#+end_src
*** Find all imports
#+begin_src emacs-lisp
  (setq lsp-clients-python-library-directories '("/opt/homebrew/lib/python3.10/site-packages/"))
#+end_src
** JSON mode
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src
** Company-mode
** Find Recent Files faster 
*** When invoking C-x C-f
1. Start from Home directory so traversing back from roam is not
   needed.
   #+begin_src emacs-lisp
     (setq default-directory "~/")
   #+end_src
2. Traversing back directory with shortcut rather than backspace.
   #+begin_src emacs-lisp

   #+end_src
** Emacs Lisp Programming  
*** TODO Lisp auto format on Save
*** Emacs-lisp Match brackets automatically
**** TODO remove <> from autopairs
#+begin_src emacs-lisp
  (use-package paredit)

  (defun my/autoparens () (paredit-mode t))
  (add-hook 'emacs-lisp-mode-hook #'my/autoparens)
  (add-hook 'lisp-interaction-mode-hook #'my/autoparens)
#+end_src
*** Aggressive Indenting
#+begin_src emacs-lisp
  (use-package aggressive-indent)
  (defun bj/aggressive-indent-enabled () (aggressive-indent-mode t))
  (add-hook 'emacs-lisp-mode #'bj/aggressive-indent-enabled)
  (add-hook 'lisp-interaction-mode-hook #'bj/aggressive-indent-enabled)


  ;; issue with indenting in org mode, esp code blocks inside. 
  ;; (add-hook 'org-mode-hook #'bj/aggressive-indent-enabled)
  #+end_src
*** Documentation and finding help
- describe-variable and describe-function are pretty useful
- Embark at point is convenient to either find references or
  definition
**** Documentation at point.
- eldoc mode is enabled for elisp code buffer. Try checking with `M-: eldoc-mode`
- It shows docs on mini-buffer. 1 line.
- TODO can we have it 2 lines
**** Info at point
- find emacs info of symbol at point with `M-x: info-lookup-symbol`
-
*** Debugging
**** Add `(debug-on-entry t)` and debugger stops on error
**** Use print but discouraged 
**** Use Edebug (Interactive)
***** Go to function defun and call `M-x: edebug-defun` which instruments the defun. 
***** Go to caller and execute, now it steps through the code. 
*** Linting
**** `M-x: elint-current-buffer`
*** Profiling
**** Performance
- `M-x: elp-instrument-function` and then execute the function.
- Then check `M-x: elp-results`.
- `M-x: elp-instrument-package` to find slow package and functions
**** Memory usage
- mutations are great if the only purpose of intemediate list is to be
  thrown away. They usually start with `nreverse`.
*** Testing

** [Disabled] Straight Package Manager
- using this confuses with normal package management.
- Disabled for now.
- When turned on to use Org-Roam-UI, it downloaded all new variants of org, org-roam and confused the existing config.
#+begin_src emacs-lisp
  ;; (defvar bootstrap-version)
  ;; (let ((bootstrap-file
  ;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  ;;       (bootstrap-version 6))
  ;;   (unless (file-exists-p bootstrap-file)
  ;;     (with-current-buffer
  ;; 	(url-retrieve-synchronously
  ;; 	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  ;; 	 'silent 'inhibit-cookies)
  ;;       (goto-char (point-max))
  ;;       (eval-print-last-sexp)))
  ;;   (load bootstrap-file nil 'nomessage))
  ;; (setq package-enable-at-startup nil)
#+end_src

** Org Roam UI
It's cool to visualize Graph.
- It downloads a lot of org, org-roam, web-socket and builds them.
- Does it duplicates the pacakges?
- This conflicted with Org-roam-capture with error
  "org-fold-show-all" not defined.
- TODO Why can it not be found on Melpa?
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src

** Org Agenda Setup
*** List of files to look
- TODO check if its possible to add entire directory to search for. 
#+begin_src emacs-lisp
  (setq org-agenda-files (directory-files-recursively "~/Library/Mobile Documents/com~apple~CloudDocs/All Notes/roamnotes/" "\\.org$"))
#+end_src
*** Org Agenda keybinding
#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") #'org-agenda)
#+end_src
*** Org set time when done
#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src
*** Other improvements to Org Agenda
1. Show file in next buffer as we go through each action item
   #+begin_src emacs-lisp
     (setq org-agenda-follow-mode 't)
   #+end_src
** Org Roam Export as HTML
#+begin_src emacs-lisp
  ;; required for org-roam-export to be available
  (require 'org-roam-export)
#+end_src

** Org Mode Start
*** Start with 2 levels shown but all hidden. Easier to read. 
#+begin_src emacs-lisp
  (setq org-startup-folded 'show2levels)
#+end_src
*** Open code on right window
#+begin_src emacs-lisp
  (setq org-src-window-setup 'split-window-right)
#+end_src
*** Indent all content to match outline indent
#+begin_src emacs-lisp
  (defun bj-indent-org-mode ()
    (org-indent-mode t))

  (add-hook 'org-mode-hook #'bj-indent-org-mode)
#+end_src
** Jump to Definition
** REST Client
- A way to express and explore API
  [[https://github.com/pashky/restclient.el][RestClient Github]]

  There was problem setting this up on another mac.
  TODO fix it.
  
#+begin_src emacs-lisp
  (use-package restclient)

  ;; install org-babel hook
  (use-package ob-restclient)
  
#+end_src

** Ruby
#+begin_src emacs-lisp
  ;; enables Org babel lang integration
  (require 'ob-ruby)
#+end_src

** Python
#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+end_src

*** Completion
#+begin_src emacs-lisp
  
#+end_src

** Search on firefox using Google
#+begin_src emacs-lisp
  (defun bj-search-web-at-point ()
    (interactive)
    (eshell-command (concat "open -a firefox " "https://www.google.com/search?q=" (word-at-point)))
    )
#+end_src

** Swift 
*** Install mode
#+begin_src emacs-lisp
  (use-package swift-mode
    :hook (swift-mode . (lambda () (lsp))))
#+end_src
*** Install Swift LSP Support
#+begin_src emacs-lisp 
(use-package lsp-sourcekit
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable (string-trim (shell-command-to-string "xcrun --find sourcekit-lsp"))))
#+end_src

** FlyCheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src

** Shell Script
+ Eshell provides nice UNIX Shell And Lisp expression REPL in the same
  place. Might be useful to get back and forth from UNIX to LISP and
  back.
+ When running unix commands its often useful to look up
  documentation, this can be achieved by man pages but they are huge.
+ Can we try lightweight example or cheatsheet pages
+ Emacs is not a fully functional visual terminal so most visual
  commands wont work nicely. Setting pager to cat does the trick.
  #+begin_src emacs-lisp
  (setenv "PAGER" "cat")
  #+end_src
+ TLDR
  #+begin_src emacs-lisp
    (use-package tldr)
  #+end_src
+ Save History
  #+begin_src emacs-lisp
    (setq eshell-directory-name ".cache/eshell")
  #+end_src

** Instruct Org-Babel for programming language
#+begin_src emacs-lisp
  (require 'ob-shell)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (restclient . t)
     (shell . t)
     (ruby . t)
     ;; (swift . t) there is no ob-swift TODO
     (python . t))
   )
#+end_src
* Themes
** Nano theme
- A simple white background theme as found on [[https://github.com/rougier/nano-theme][Nano theme GH]]
- Use Straight to install 
#+begin_src emacs-lisp
  ;; install nano-theme
  ;; (use-package nano-theme
  ;;    :init (load-theme 'nano-light t))  
#+end_src
** Spacemacs Theme
*** Install theme
#+begin_src emacs-lisp
   ;; Dark theme. Non-dark variant is found with spacemacs-light
   ;; alternative good option is tango-dark.
   ;; unsing t at the end supresses interactive prompt.

  (use-package spacemacs-theme
        :defer t
        :init (progn
               (custom-set-variables '(spacemacs-theme-custom-colors
                                       '((bg1 .  "#f8f8f8"))
                              ))
               (load-theme 'spacemacs-light t)
               )
        )
#+end_src
*** Use White background as opposed to brownish tint
#+begin_src emacs-lisp
  ;; (custom-set-variables '(spacemacs-theme-custom-colors
  ;;                           '(
  ;;                             (bg1 . "#ffffff")
  ;;                             )
  ;;                           )
  ;;                       )
#+end_src
*** Flycheck fringe
- described at [[https://github.com/nashamri/spacemacs-theme][Theme docs]] and [[https://www.flycheck.org/en/latest/user/installation.html#syntax-checking-tools][FlyCheck]]
- How is it different from LSP Mode?
#+begin_src emacs-lisp
(use-package flycheck
  :init
  (progn
    (define-fringe-bitmap 'my-flycheck-fringe-indicator
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))

    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-error)

    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-warning)

    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-info)))
#+end_src
